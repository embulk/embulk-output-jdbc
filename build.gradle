
plugins {
    id 'com.jfrog.bintray' version '1.6'
    id 'com.github.jruby-gradle.base' version '1.2.1'
    id 'java'
    id 'checkstyle'
}
import com.github.jrubygradle.JRubyExec

allprojects {
    group = 'org.embulk.output.jdbc'
    version = '0.7.4'
}

subprojects {
    apply plugin: 'maven'  // install jar files to the local repo: $ gradle install
    apply plugin: 'java'
    apply plugin: 'findbugs'
    //apply plugin: 'jacoco'
    apply plugin: 'com.github.jruby-gradle.base'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "http://dl.bintray.com/embulk-input-s3/maven"
        }
    }

    configurations {
        provided
    }

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        compile  'org.embulk:embulk-core:0.8.8'
        provided 'org.embulk:embulk-core:0.8.8'
        testCompile 'junit:junit:4.+'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" //<< "-Xlint:deprecation"
        options.encoding = 'UTF-8'
    }
    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    findbugs {
        ignoreFailures = true
    }

    javadoc {
        options {
            locale = 'en_US'
            encoding = 'UTF-8'
        }
    }

    task classpath(type: Copy, dependsOn: ["jar"]) {
        doFirst { file('classpath').deleteDir() }
        from (configurations.runtime - configurations.provided + files(jar.archivePath))
        into 'classpath'
    }
    clean { delete 'classpath' }

    checkstyle {
        configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        toolVersion = '6.14.1'
    }
    checkstyleMain {
        configFile = file("${project.rootDir}/config/checkstyle/default.xml")
        ignoreFailures = true
    }
    checkstyleTest {
        configFile = file("${project.rootDir}/config/checkstyle/default.xml")
        ignoreFailures = true
    }
    task checkstyle(type: Checkstyle) {
        classpath = sourceSets.main.output + sourceSets.test.output
        source = sourceSets.main.allJava + sourceSets.test.allJava
    }

    task gem(type: JRubyExec, dependsOn: ['build', 'gemspec', 'classpath']) {
        jrubyArgs '-rrubygems/gem_runner', "-eGem::GemRunner.new.run(ARGV)", 'build'
        scriptArgs "${project.projectDir.absolutePath}/build/gemspec"
        doLast { ant.move(file: "${project.name}-${project.version}.gem", todir: "${parent.projectDir}/pkg") }
    }

    task gemspec << {
        file('build').mkdirs();
        file('build/gemspec').write($/
Gem::Specification.new do |spec|
  spec.name          = "${project.name}"
  spec.version       = "${project.version}"
  spec.authors       = ["Sadayuki Furuhashi"]
  spec.summary       = %[JDBC output plugin for Embulk]
  spec.description   = %[Inserts or updates records to a table.]
  spec.email         = ["frsyuki@gmail.com"]
  spec.licenses      = ["Apache 2.0"]
  spec.homepage      = "https://github.com/embulk/embulk-output-jdbc"

  spec.files         = `git ls-files`.split("\n") + Dir["classpath/*.jar"]
  spec.test_files    = spec.files.grep(%r"^(test|spec)/")
  spec.require_paths = ["lib"]
end
/$)
    }
}

task gempush << {
    "gem push pkg/embulk-output-jdbc-${project.version}.gem".execute().waitFor()
    "gem push pkg/embulk-output-mysql-${project.version}.gem".execute().waitFor()
    "gem push pkg/embulk-output-postgresql-${project.version}.gem".execute().waitFor()
    "gem push pkg/embulk-output-redshift-${project.version}.gem".execute().waitFor()
    "gem push pkg/embulk-output-oracle-${project.version}.gem".execute().waitFor()
    "gem push pkg/embulk-output-sqlserver-${project.version}.gem".execute().waitFor()
    "gem push pkg/embulk-output-db2-${project.version}.gem".execute().waitFor()
}
